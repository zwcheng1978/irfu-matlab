% MMS_PHASEFROMSUNPULSE_2_TEST is a unit testing framework for testing
% mms_phaseFromSunpulse calculation of spin phase from sunpulse data
% (found in HK_101).
%   results = MMS_PHASEFROMSUNPULSE_2_TEST creates a unit testing
%   framework for testing phase calculation, and make sure that they are as
%   expected. Including testing of flags identifying extrapolations, as
%   well as data gaps, etc.
%   These functions require Matlab R2013b or later.
%
%       Example:
%               results = mms_phaseFromSunpulse_2_Test
%               results.run
%
%       See also MATLAB.UNITTEST.


function tests = mms_phaseFromSunpulse_2_Test
    % Verify version of Matlab (R2013b or later).
    if( verLessThan('matlab', '8.3') )
        error('Require R2013b or later to run this test. Please upgrade.');
    end
    
    % Setup basics, such as logging.
    global ENVIR MMS_CONST;
    if isempty(MMS_CONST), MMS_CONST = mms_constants(); end
    ENVIR = mms_sdc_sdp_init('2');
    
    % Run the tests
    tests = functiontests(localfunctions);
end

function testCompleteSunpulses(testCase)
% This test will try to calculate phase for timestamps which completly lies
% between sunpulses without any gaps or extrapolations at the beginning or
% end.

% Get inputs.
[reqTimes, hk_101] = getInputDataForTests;

% Compute phase and corresponding flags.
[phase, flags] = mms_sdc_sdp_phase_2(hk_101, reqTimes);

% Compare results with expected results. We forced the first reqTime to be
% halfway between two sunpulses so first phase should be almost exactly 180
% degrees.
expPhase = [179.999999424001;198.000194630231;216.000388684463;...
    234.000582738695;252.000776792926;270.000970847158;288.001164901390;...
    306.001358955622;324.001553009853;342.001747064085;0.00194111831666220;...
    18.0021351725484;36.0023292267801;54.0025232810118;72.0027173352435;...
    90.0029113894752;108.003105443707;126.003299497939;144.003493552170;...
    162.003687606402;180.003881660634;198.004075714866;216.004269769097;...
    234.004463823329;252.004657877561;270.004851931792;288.005045986024;...
    306.005240040256;324.005434094488;342.005628148719;0.00582220295098560;...
    18.0060162571827;36.0062114634134;54.0064055176451;72.0065995718769;...
    90.0067936261086;108.006987680340;126.007181734572;144.007375788804;...
    162.007569843035;180.007763897267;198.007957951499;216.008152005731;...
    234.008346059962;252.008540114194;270.008734168426;288.008928222657;...
    306.009122276889;324.009316331121;342.009510385353;0.00970443958430999;...
    18.0098984938160;36.0100925480477;54.0102866022795;72.0104806565112;...
    90.0106747107429;108.010868764975;126.011062819206;144.011256873438;...
    162.011450927670;180.011644405939;198.011838517772;216.012032629604;...
    234.012226741436;252.012420853268;270.012616117100;288.012810228932;...
    306.013004340764;324.013198452597;342.013392564429;0.0135866762611117;...
    18.0137807880934;36.0139748999257;54.0141690117580;72.0143631235903;...
    90.0145572354226;108.014751347255;126.014945459087;144.015139570919;...
    162.015333682752;180.015528370534;198.015722424766;216.015916478997;...
    234.016110533229;252.016304587461;270.016498641692;288.016692695924;...
    306.016886750156;324.017080804388;342.017274858619;0.0174689128509588;...
    18.0176629670827;36.0178570213144;54.0180510755461;72.0182451297778;...
    90.0184391840095;108.018634390240;126.018828444472;144.019022498704;...
    162.019216552935;180.019410607167;198.019604661399;216.019798715631;...
    234.019992769862;252.020186824094;270.020380878326;288.020574932557;...
    306.020768986789;324.020963041021;342.021157095253;0.0213511494842832;...
    18.0215452037160;36.0217392579477;54.0219333121794;72.0221273664111;...
    90.0223214206429;108.022515474875;126.022709529106;144.022903583338;...
    162.023097637570;180.023291691801;198.023485746033;216.023679800265;...
    234.023873854497;252.024067908728;270.024261962960;288.024456017192;...
    306.024650071424;324.024844125655;342.025039331886;0.0252333861176076;...
    18.0254274403493;36.0256214945810;54.0258155488128;72.0260096030445;...
    90.0262036572762;108.026397711508;126.026591765740;144.026785819971;...
    162.026979874203;180.027173352522;198.027367464355;216.027561576187;...
    234.027755688019;252.027949799851;270.028143911684;288.028338023516;...
    306.028532135348;324.028726247181;342.028920359013;0.0291144708450972;...
    18.0293085826774;36.0295026945097;54.0296968063420;72.0298909181743;...
    90.0300850300065;108.030279141839;126.030473253671;144.030667365503;...
    162.030861477336;180.031057317067;198.031251371299;216.031445425531];

expFlags = zeros(163, 1, 'int16');

% Verify phase, within rounding error of the static values listed above.
verifyEqual(testCase, phase, expPhase, 'AbsTol', 10^-12);

% Verify flags
verifyEqual(testCase, flags, expFlags);

end


function testGapsSunpulses(testCase)
% This test will try to calculate phase for timestamps which completly lies
% between sunpulses but which have a number of gaps in the sunpulse series.
% One minor gap initially and one larger gap towards the end.
% This also tries to look at all arguments.

% Get inputs.
[reqTimes, hk_101] = getInputDataForTests;

% Create some gaps, one initial minor gap and one larger gap towards the
% end.
ind = [1:5, 15:22, 90:100];
hk_101.time      = hk_101.time(ind);
hk_101.sunpulse  = hk_101.sunpulse(ind);
hk_101.sunssps   = hk_101.sunssps(ind);
hk_101.iifsunper = hk_101.iifsunper(ind);

% Compute phase and corresponding flags. Get all arguments as well.
[phase, flags, pulse, period, period_flag] = mms_sdc_sdp_phase_2(hk_101, reqTimes);

% Expected phase
expPhase = [179.999999424001;198.000194630231;216.000388684463;...
    234.000582738695;252.000776792926;270.000970847158;288.001164901390;...
    306.001358955622;324.001553009853;342.001747064085;0.00194111831666220;...
    18.0021351725484;36.0023292267801;54.0025232810118;72.0027173352435;...
    90.0029113894752;108.003105443707;126.003299497939;144.003493552170;...
    162.003687606402;180.003881660634;198.004075714866;216.004269769097;...
    234.004463823329;252.004657877561;270.004851931792;288.005045986024;...
    306.005240040256;324.005434094488;342.005628148719;0.00582220295098560;...
    18.0060162571827;36.0062114634134;54.0064055176451;72.0065995718769;...
    90.0067936261086;108.006987680340;126.007181734572;144.007375788804;...
    162.007569843035;180.007763761744;198.007957829529;216.008151897313;...
    234.008345965098;252.008540032883;270.008734100668;288.008928168453;...
    306.009122236237;324.009316304022;342.009510371807;0.00970443959161686;...
    18.0098985073764;36.0100925751612;54.0102866429460;72.0104807107308;...
    90.0106747785156;108.010868846300;126.011062914085;144.011256981870;...
    162.011451049655;180.011645117440;198.011839185224;216.012033253009;...
    234.012227320794;252.012421388579;270.012616608362;288.012810676147;...
    306.013004743932;324.013198811717;342.013392879502;0.0135869472864556;...
    18.0137810150712;36.0139750828560;54.0141691506408;72.0143632184256;...
    90.0145572862104;108.014751353995;126.014945421780;144.015139489565;...
    162.015333557350;180.015527625134;198.015721692919;216.015915760704;...
    234.016109828489;252.016303896273;270.016497964058;288.016692031843;...
    306.016886099628;324.017080167413;342.017274235197;0.0174683029821381;...
    18.0176623707670;36.0178564385518;54.0180505063366;72.0182445741215;...
    90.0184386419063;108.018633861690;126.018827929475;144.019021997260;...
    162.019216065044;180.019410132829;198.019604200614;216.019798268399;...
    234.019992336183;252.020186403968;270.020380471753;288.020574539538;...
    306.020768607323;324.020962675108;342.021156742892;0.0213508106769496;...
    18.0215448784618;36.0217389462466;54.0219330140315;72.0221270818163;...
    90.0223211496009;108.022515217386;126.022709285171;144.022903352955;...
    162.023097420740;180.023291488525;198.023485556310;216.023679624094;...
    234.023873691879;252.024067759664;270.024261827449;288.024455895234;...
    306.024649963018;324.024844030803;342.025039250587;0.0252333183716473;...
    18.0254273861565;36.0256214539413;54.0258155217261;72.0260095895110;...
    90.0262036572958;108.026397725081;126.026591792865;144.026785860650;...
    162.026979928435;180.027173996220;198.027368064005;216.027562131789;...
    234.027756199574;252.027950267359;270.028144335144;288.028338402929;...
    306.028532470713;324.028726538498;342.028920606283;0.0291146740678414;...
    18.0293087418527;36.0295028096375;54.0296968774219;72.0298909452067;...
    90.0300850129916;108.030279080776;126.030473148561;144.030667216346;...
    162.030861284131;180.031056503914;198.031250571699;216.031444639484];

% Expected period_flags.
expPeriodFlag = int16([0;0;0;1;0;0;0;0;1;0;0;0;0;0;0]);

% Expected flag
expFlags = [zeros(40,1,'int16'); ones(123,1,'int16')];

% Verify phase, within rounding error of the static values listed above.
verifyEqual(testCase, phase, expPhase, 'AbsTol', 10^-12);

% Verify flags
verifyEqual(testCase, flags, expFlags);

% Verify period_flags
verifyEqual(testCase, period_flag, expPeriodFlag);
end


function testExtrapolations(testCase)
% This test will try to calculate phase for timestamps which extends
% outside of the continous sunpulse time series. Going back to the
% beginning, the extrapolated values should end up with first phase being
% very close to 180 degrees.

% Get inputs.
[reqTimes, hk_101] = getInputDataForTests;

% Cut away some of the HK 101 timestamps while keeping the reqested times
% unmodified, ie force some extrapolation to occur. Make sure it covers
% more than 3 full spins to be extrapolated.
hk_101.time      = hk_101.time(25:end);
hk_101.sunpulse  = hk_101.sunpulse(25:end);
hk_101.sunssps   = hk_101.sunssps(25:end);
hk_101.iifsunper = hk_101.iifsunper(25:end);

% Compute phase and corresponding flags.
[phase, flags] = mms_sdc_sdp_phase_2(hk_101, reqTimes);

expPhase = [179.981099507875;197.981504728251;215.981908796615;...
    233.982312864979;251.982716933343;269.983121001707;287.983525070071;...
    305.983929138435;323.984333206799;341.984737275163;359.985141343527;...
    17.9855454118904;35.9859494802545;53.9863535486184;71.9867576169822;...
    89.9871616853462;107.987565753710;125.987969822074;143.988373890438;...
    161.988777958802;179.989182027166;197.989586095530;215.989990163894;...
    233.990394232258;251.990798300622;269.991202368986;287.991606437350;...
    305.992010505713;323.992414574077;341.992818642441;359.993222710805;...
    17.9936267791692;35.9940319995455;53.9944360679095;71.9948401362734;...
    89.9952442046374;107.995648273001;125.996052341365;143.996456409729;...
    161.996860478093;179.997264546457;197.997668614821;215.998072683185;...
    233.998476751549;251.998880819913;269.999284888277;287.999688956641;...
    306.000093025005;324.000497093369;342.000901161733;0.00130523009647732;...
    18.0017092984604;36.0021133668242;54.0025174351883;72.0029215035522;...
    90.0033255719161;108.003729640280;126.004133708644;144.004537777008;...
    162.004941845372;180.005345913736;198.005749982100;216.006154050464;...
    234.006558118828;252.006962187192;270.007367407568;288.007771475932;...
    306.008175544296;324.008579612660;342.008983681024;0.00938774938769339;...
    18.0097918177516;36.0101958861156;54.0105999544795;72.0110040228435;...
    90.0114080912074;108.011812159571;126.012216227935;144.012620296299;...
    162.013024364663;180.015528370534;198.015722424766;216.015916478997;...
    234.016110533229;252.016304587461;270.016498641692;288.016692695924;...
    306.016886750156;324.017080804388;342.017274858619;0.0174689128509588;...
    18.0176629670827;36.0178570213144;54.0180510755461;72.0182451297778;...
    90.0184391840095;108.018634390240;126.018828444472;144.019022498704;...
    162.019216552935;180.019410607167;198.019604661399;216.019798715631;...
    234.019992769862;252.020186824094;270.020380878326;288.020574932557;...
    306.020768986789;324.020963041021;342.021157095253;0.0213511494842832;...
    18.0215452037160;36.0217392579477;54.0219333121794;72.0221273664111;...
    90.0223214206429;108.022515474875;126.022709529106;144.022903583338;...
    162.023097637570;180.023291691801;198.023485746033;216.023679800265;...
    234.023873854497;252.024067908728;270.024261962960;288.024456017192;...
    306.024650071424;324.024844125655;342.025039331886;0.0252333861176076;...
    18.0254274403493;36.0256214945810;54.0258155488128;72.0260096030445;...
    90.0262036572762;108.026397711508;126.026591765740;144.026785819971;...
    162.026979874203;180.027173352522;198.027367464355;216.027561576187;...
    234.027755688019;252.027949799851;270.028143911684;288.028338023516;...
    306.028532135348;324.028726247181;342.028920359013;0.0291144708450972;...
    18.0293085826774;36.0295026945097;54.0296968063420;72.0298909181743;...
    90.0300850300065;108.030279141839;126.030473253671;144.030667365503;...
    162.030861477336;180.031057317067;198.031251371299;216.031445425531];

% Flags: 20 in the first part of the extrapolation, 10 in the second part
% then followed by 0 where it fully overlaps.
expFlags = [20*ones(11,1,'int16'); 10*ones(59,1,'int16'); zeros(93,1,'int16')];

% Verify phase, within rounding error of the static values listed above.
verifyEqual(testCase, phase, expPhase, 'AbsTol', 10^-12);

% Verify flags
verifyEqual(testCase, flags, expFlags);

end


function [reqTimes, hk_101] = getInputDataForTests
% Store unmodified data to be used for tests (remove selected parts in each
% individual test). Data taken from HK_101 file generated with MRT9 but to
% with any form of gitter removed.

% Take first timestamp from MRT9 HK 101 file and step 100 times with
% average timestep from the MRT9 HK 101 file.
hk_101 = [];
hk_101.time=int64(481896072187621632:10000421120:481896072187621632+99*10000421120)';

% Take first sunpulse from MRT9 HK 101 file and step every other datapoint
% with average timestep from MRT9 HK 101 file.
tmp1=int64(481896070397772032:20000017330:481896070397772032+49*20000017330)';
hk_101.sunpulse=sort([tmp1; tmp1]);

hk_101.sunssps = zeros(100, 1, 'uint8'); % All zeros.

% Average iifsunper from 100 first datapoints in MRT9 HK 101 file.
hk_101.iifsunper=19999784*ones(100,1,'uint32');

% request phase for 163 timestamps (with dt same as from DCE from MRT9)
% beginning exactly halfway between two sunpulses meaning first expected
% phase will be almost exactly 180 degrees.
reqTimes = int64(hk_101.sunpulse(16)+diff(hk_101.sunpulse(16:17))/2:1000011650:hk_101.sunpulse(16)+diff(hk_101.sunpulse(16:17))/2+162*1000011650)';

end